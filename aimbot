local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")

local screenGui = Instance.new("ScreenGui", playerGui)
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 200, 0, 120)
frame.Position = UDim2.new(0, 10, 0, 80)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.Active = true
frame.Draggable = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)

local toggleButton = Instance.new("TextButton", frame)
toggleButton.Size = UDim2.new(0, 180, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 13
toggleButton.Text = "Aimbot: OFF (T)"
toggleButton.AutoButtonColor = false
Instance.new("UICorner", toggleButton).CornerRadius = UDim.new(0, 8)

local teamButton = Instance.new("TextButton", frame)
teamButton.Size = UDim2.new(0, 180, 0, 40)
teamButton.Position = UDim2.new(0, 10, 0, 70)
teamButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
teamButton.TextColor3 = Color3.new(1, 1, 1)
teamButton.Font = Enum.Font.SourceSansBold
teamButton.TextSize = 13
teamButton.Text = "TeamCheck: OFF (H)"
teamButton.AutoButtonColor = false
Instance.new("UICorner", teamButton).CornerRadius = UDim.new(0, 8)

local aimbotEnabled = false
local teamCheck = false
local currentTarget

local fovCircle = Drawing.new("Circle")
fovCircle.Color = Color3.fromRGB(0, 255, 0)
fovCircle.Thickness = 1
fovCircle.Radius = 150
fovCircle.Filled = false
fovCircle.Visible = false

local function getTargetPart(character)
	return character:FindFirstChild("Neck") or character:FindFirstChild("Head")
end

local function getVisibleTarget(character)
	local origin = camera.CFrame.Position
	local targetPart = getTargetPart(character)
	if not targetPart then return nil end

	local rayParams = RaycastParams.new()
	rayParams.FilterType = Enum.RaycastFilterType.Blacklist
	rayParams.FilterDescendantsInstances = {localPlayer.Character, workspace.CurrentCamera}
	rayParams.IgnoreWater = true

	local result = workspace:Raycast(origin, (targetPart.Position - origin), rayParams)
	if not result or result.Instance:IsDescendantOf(character) then
		local screenPos, onScreen = camera:WorldToViewportPoint(targetPart.Position)
		if onScreen then
			return targetPart
		end
	end
	return nil
end

local function getTarget()
	local closest = nil
	local minDist = math.huge
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
			if not teamCheck or player.Team ~= localPlayer.Team then
				local part = getVisibleTarget(player.Character)
				if part then
					local screenPos = camera:WorldToViewportPoint(part.Position)
					local dist = (Vector2.new(screenPos.X, screenPos.Y) - camera.ViewportSize/2).Magnitude
					if dist < minDist and dist <= fovCircle.Radius then
						minDist = dist
						closest = player
					end
				end
		end
	end
	return closest
end

local function setAimbot(state)
	aimbotEnabled = state
	toggleButton.Text = state and "Aimbot: ON (T)" or "Aimbot: OFF (T)"
	TweenService:Create(toggleButton, TweenInfo.new(0.15), {
		BackgroundColor3 = state and Color3.fromRGB(60, 130, 60) or Color3.fromRGB(30, 30, 30)
	}):Play()
	fovCircle.Visible = state
	if not state then currentTarget = nil end
end

local function setTeamCheck(state)
	teamCheck = state
	teamButton.Text = state and "TeamCheck: ON (H)" or "TeamCheck: OFF (H)"
	TweenService:Create(teamButton, TweenInfo.new(0.15), {
		BackgroundColor3 = state and Color3.fromRGB(60, 130, 60) or Color3.fromRGB(30, 30, 30)
	}):Play()
end

toggleButton.MouseButton1Click:Connect(function()
	setAimbot(not aimbotEnabled)
end)

teamButton.MouseButton1Click:Connect(function()
	setTeamCheck(not teamCheck)
end)

UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.T then
		setAimbot(not aimbotEnabled)
	elseif input.KeyCode == Enum.KeyCode.H then
		setTeamCheck(not teamCheck)
	end
end)

RunService.RenderStepped:Connect(function()
	fovCircle.Position = UserInputService:GetMouseLocation()
	if aimbotEnabled then
		if currentTarget and currentTarget.Character then
			local part = getTargetPart(currentTarget.Character)
			if part then
				camera.CFrame = CFrame.new(camera.CFrame.Position, part.Position)
			else
				currentTarget = nil
			end
		else
			currentTarget = getTarget()
		end
	end
end)

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
	local method = getnamecallmethod()
	local args = {...}
	if aimbotEnabled and currentTarget and currentTarget.Character then
		local part = getTargetPart(currentTarget.Character)
		if part then
			if method == "FindPartOnRayWithIgnoreList" and typeof(args[1]) == "Ray" then
				args[1] = Ray.new(camera.CFrame.Position, (part.Position - camera.CFrame.Position).Unit * 1000)
				return oldNamecall(self, unpack(args))
			elseif method == "Raycast" and typeof(args[2]) == "Vector3" then
				args[2] = (part.Position - args[1]).Unit * 1000
				return oldNamecall(self, unpack(args))
			end
		end
	end
	return oldNamecall(self, ...)
end)
